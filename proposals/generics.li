-- Ligi is a statically typed language.
-- You can, however, make functions that take arguments of any type

let add = pure fn a: undef, b: undef -> c: undef = a + b
_ = add(1, 2)
_ = add(1.0, 2.0)
_ = add(-100, 10)

-- You can also get the concrete type used to call the function
let foo = fn arg: undef -> void = {
  printf("arg's type was {0}", arg.@type)
}
foo(10) --= arg's type was usize
foo(10.0) --= arg's type was f64
foo(true) -- arg's type was bool
foo("Hey") -- arg's type was slice const u8

-- You can also place restraints on generic args
-- Also note that rightmost untyped arguments are undef by default, as well as untyped retvals
let adder = pure fn a, b -> c = {
  -- Only allows adder to be used with floats
  assert (a,b).@type in (f32, f64)
  a + b
}

-- ERROR: "usize" is not in ("f32", "f64")
-- adder(10, 20)
-- OK
_ = adder(10.0, 20.0)
-- Note that above, type coercions break down
-- This may be able to be fixed, but I don't know.


-- Note that a generic function, like a function that takes comptime args, cannot be extern
-- ERROR: extern function cannot have undef argument types
-- let myFunc = extern fn a, b -> c {}

-- You can, however, make a generic function concrete and export that
-- Also note the need for parentheses around the function type, as functions use retval= in their definition
let myAdder: extern (fn _:f32, _:f32 ->_:f32) = adder
-- or
let myAdder2 = @as(extern fn _:f32, _:f32 -> _:f32, adder)
-- or
let myAdder3 = adder.@as(extern fn _:f32, _:f32 -> _:f32)


-- Update as of 03/29: I'm leaning towards moving to `[]` (a la nim) for generic types.
-- Reasoning:
-- - It allows for type inference (more easily than `()`, anyway...)
-- - It can still be implemented in a function-like manner
-- - It can more logically allow for specializing certain generic combinations

-- Notes:
-- - This is only for generic types. Functions still use the normal implicit-is-generic stuff.
-- - Functions will still be used for more complex generics.
-- - Generic types shall be organized into "typesets". Thus, generics are simply indexing into a typeset.
-- - Typesets shall have a `kind`, which is one of `#Struct`, `#Enum`, etc
--   - This reduces surprises, as you can no longer get either a struct or an enum from a generic type invocation.

-- Possible examples:

-- Simple generic where no custom logic outside the type itself is needed:
let Vec2 = struct[T]:
  -- The above could also have more arguments (like `struct[T, U, V]`)
  field x: T, y: T

-- `struct[...]` is actually just a sugar for `struct fn ... -> RES:type = ....`. Thus,
-- we can use that form directly for more complex logic.
let Foo = struct fn T -> res:type =
  -- As a part of this, we will also overloading the `()` operator.
  -- This allows for implementing `struct` itself in userspace.
  if T in SomeTypeclass:
    struct:
      field x: T
  elif T in SomeTypeclass:
    struct field y: T
  -- ...or something...

-- Usage:
var v = (:Vec2[f32]: .x = 0, .y = 0)

var f: Foo[i32]


