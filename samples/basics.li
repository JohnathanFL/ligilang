-- Basic primer:
-- `--` is a line comment
-- - It used to be a `(:` terminated by `:)`, so don't be surprised if you see random `:)` lying around 
-- Indentation matters
-- Semicolons aren't used
-- assert is a builtin statement. It panics if its condition is false

let x = 10 -- constant declaration. `let` is a "bind specifier"
assert x.@type == usize -- usize is default type for int literals. @type is a property of all things
var -- variables
  y = 20 -- An indented block after a bind specifier signals one bind per line
  z: usize = 30 -- specifying a type
let w = -- A block after an assignment op is evaluated and its result becomes the value assigned
  var myVar = 50.as: isize -- .as is a builtin for primitive types. `:` call syntax lets you avoid parens
  -- Even though `w` is const, we can assign to it freely inside its init block
  w = 1.5 -- floats default to f64
  while myVar > 0
    w *= 2
    myVar -= myVar / 2
-- myVar is now out of scope

-- Basic literals

-- Strings
let s = "Hello, world!" -- quoted
assert s.@type == str -- `str` is `slice const u8` extended with some string helpers

-- Raw string. Starts from `\\ ` (not including the space) and goes to end of line
let s = \\ Hello, world!
-- raw strings add newlines between consecutive raw strings
let s =
  \\ #include <stdio.h>
  \\
  \\ int main() { return 0; }

-- There aren't actually numeric literals, they're all just words.
-- That's what allows naming things `2xMSAA` or similar

let x = 10 -- integer (usize by default)
let y = -10 -- Infers isize if needed

-- Floating point literals are actually just `.` accesses into integers.
-- They're (intended to be) resolved based on a regex of what's accessed
let d = 10.0 -- f64 (double) by default
let f = 10.0f -- a "dot number" access that ends in an `f` is inferred as `f32`(float)

let (b1, b2) = (true, false) -- bool

-- anyenum (may represent any enum *present in the program*)
-- (you will be able to solidify anyenum values for ABI stability in the future)
let a = #Hi
assert a == #Hi
assert a.@type == anyenum

-- Array literal
let ar = [0, 1, 2] -- =type= is optional
assert ar.@type == array(3, usize)
-- Struct literal
let vec3 = [.x = 0, .y = 0, .z = 0]
-- =type= is optional, if type cannot be inferred then it is an anonymous struct

-- Tuples
let t = (0, false, "Hello")
assert t.@type == (usize, bool, str)


-- Calls and accesses
-- Functions can be called like unary operators (at the same precedence)
printf "Hello, world!"
-- `()` or `[]` directly following a function are interpreted as calls and indexes
printf("Hello, {}!\n", "Rito") -- printf(str, str), not printf tuple(str, str)
-- Remember that these are the same precedence as unary operators:
let double = pure fn a -> b = a + a
assert double 5 + 1 == 11

-- To reset precedence, use `:`
assert 12 == double: 5 + 1 -- resets for the rest of the expr, so we needed to swap 12 to the left

-- `.` is field access or method call
let Foo = struct: -- Structs are covered later
  field x: usize, y: usize
  let bar = pure fn self: @This -> result = self.x * 10
let x = [
  =Foo=
  .x = 10,
  .y = 20,
]
assert x.y == 10
assert x.bar == 100
-- You can swizzle with `.`
assert x.(x, y) == (10, 20)
-- Swizzling also applies to all members of a tuple (only a non-extended tuple)
let a = (x, x, x)
assert a.y == (20, 20, 20)


-- `.` can only call a method declared inside the type. For external methods, use `::` or `:>`
-- `::` is at the same precedence as `.` and passes the left as the first argument to the right
assert 5::double == 10
-- `:>` is like the classsical pipeline operator from functional languages (`|>`)
-- Precedence binds looser than everything but assignment ops
assert (5 :> double) == 10

-- Control structures

-- Wherever a block is allowed, it can be replaced with a block in `{}`, as in
if x
  then
-- becoming
if x { then }
-- Thus you can do Pythonic or C-styled at your discretion


-- If
if x
  do_this
elif y
  do_other
else
  do_else
finally
  did_this_or_other -- Executed if any non-else branch is taken, intended for cleanup
-- If checking an optional, you can capture the inner value
let x: ?usize = 10
if x == #Some -> inner { assert inner == 10 }
-- #Some is `?T`'s implicit capture, so you can also just do
if x -> inner { assert inner == 10 }
  

-- When (`if` with a common lefthand side ("lhs"))
if x == y
  do_1
elif x == z
  do_2
else
  do_3
-- becomes
when x -- `x` is called the lhs
  is y
    do_1
  is z
    do_2
  else
    do_3
-- `is` implies `==`, unless another valid comparison op is present
when x -> xVal -- you can also capture the value of the lhs (in case of a complicated expression)
  is in 0..100
    do_0_100
  is > 1000
    do_over_1000
  -- ...
  else
    do_else
  finally -- finally also works
    was_0_100_or_over_1000


-- All loops can capture a counter that gives the iteration number

-- Infinite loop
loop -> i
  printf("{}\n", i)

-- Conditional loop (can capture values)
let x: ?usize = 10
while x -> xVal, i -- xVal captured from the condition, i is iteration number
  printf("x is {}, for the {}th time\n", xVal, i)

-- Range loop
for 100..200 -> iCapt, i -- iCapt is the value from the range, i is iteration number
  assert iCapt == i + 100

-- Unit testing
let is_even = pure fn a -> res = a mod 2 == 0
test "is_even"
  assert is_even 2
  assert not is_even 3



let a
a = 20 -- Ligi only cares that a `let` is assigned to once, not where it happens




-- Basic Types
--- Numerical
---- Integers
-- You can have arbitrarily sized integers (a la Zig)
let 1bit: u1 = 1 -- or 0, no other possible values
let massive: u1024 = undef
---- Floats
-- You have f16, f32, f64, and f128
--- `bool` for booleans
--- `char`, which is a `u32` for representing UTF-32


-- Making your own types
--- Structs
let Vec3 = struct: -- `struct` is a unary op, `:` lets you call it on a block
  field x: f32, y: f32, z: f32 -- `field` is a bind spec like `let` or `var`
  -- @This refers to the current type we're making
  let add = pure fn lhs: @This, rhs: @This -> new: @This = [
    .x = lhs.x + rhs.x, .y = lhs.y + rhs.y, .z = lhs.z + rhs.z
  ]
--- Enums
---- Option 1
let Meal = enum ( #Breakfast, #Lunch, #Supper )
let m = Meal.Breakfast
assert m == #Breakfast -- can compare against anyenums
---- Option 2
let Option = enum:
  enum
    MSAA: usize -- "type" of an enum is the union's inner type for that tag
    Res: (usize, usize)
    Fullscreen: bool
var o: Option
-- An anyenum followed by a tuple or compound literal (`[]`) specifies the inner value
o = #MSAA(4)
o = #Res(1920, 1080)
assert o != #Fullscreen(false)


--- Concepts
let IStack = pure fn T: comptime type -> C = concept:
  -- @This in a concept is the type we're testing
  var s: @This
  var el: T

  -- `concept` typechecks its body
  el = s.pop
  s.push(el)
-- Concepts match using `in`
assert SomeStack in IStack(str)
-- You can also do typeclass styled concepts:
assert usize in ~void -- Is usize not void?
assert usize in (u1 | i1 | usize)
-- `&` can be used to combine concepts
assert SomeStack in (~Indexable & IStack(str))


-- The rest of the language will be covered in various other samples. This is already a bit long
-- for "basics"
